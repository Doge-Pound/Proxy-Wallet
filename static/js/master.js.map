{"version":3,"file":"static/js/master.js","mappings":"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","sources":["js/tweet/replyButtons.js","js/utils/getGmText.js","js/utils/getLastChild.js","js/tweet/gmButton.js","js/utils/reply.js","js/tweet/editableContent.js","js/master.js"],"sourcesContent":["/*global chrome*/\n\nimport {getReplyContentFromType, replyGm, replyGn} from \"../utils/getGmText\";\n\nconst gmClassName = 'gm-reply';\nconst gnClassName = 'gn-reply';\nconst dataGmType  = 'data-gmtype';\n\nconst replyButtons = () => {\n    const replies = document.querySelectorAll(\"div[role='button'][data-testid='reply']\");\n\n    if (replies) {\n        replies.forEach((element) => {\n            let regularReplyButton = element.parentNode;\n            const actionsBlock     = regularReplyButton.closest(\"[role='group']\");\n            regularReplyButton     = actionsBlock.firstChild;\n\n            createButton('GM', gmClassName, actionsBlock, regularReplyButton, element);\n            createButton('GN', gnClassName, actionsBlock, regularReplyButton, element);\n        })\n    }\n}\n\nconst createButton = (label, className, actionsBlock, regularReplyButton, replyElement) => {\n    if (!actionsBlock.querySelector(`.${className}`)) {\n        const newElement = regularReplyButton.cloneNode(true);\n\n        newElement.classList.add(className);\n        newElement.setAttribute(dataGmType, className);\n\n        // Delete text (number replies)\n        const spanElement = newElement.querySelector('span');\n        if (spanElement) {\n            const textElement = spanElement.parentNode;\n            textElement.parentNode.removeChild(textElement);\n        }\n\n        // Change icon\n        const buttonContent  = document.createElement('span');\n        buttonContent.innerText             = label;\n        buttonContent.style.width           = '110%';\n        buttonContent.style.textAlign       = 'center';\n        buttonContent.style.backgroundColor = 'rgb(233, 110, 195);\n        buttonContent.style.color           = 'rgb(255,255,255)';\n        buttonContent.style.borderRadius    = '15px';\n        buttonContent.style.padding         = '3px';\n\n        const svgElement = newElement.querySelector('svg');\n        svgElement.replaceWith(buttonContent);\n\n        simulateClickOnReplyButton(newElement, replyElement)\n\n        actionsBlock.appendChild(newElement);\n    }\n}\n\nconst simulateClickOnReplyButton = (clickedElement, simulateElement) => {\n    clickedElement.addEventListener('click', (e) => {\n        simulateElement.click();\n\n        setTimeout(() => {\n            const modalBox = document.querySelector(\"[aria-labelledby='modal-header']\");\n\n            chrome.storage.local.get([\"GmReplyWithName\"]).then((result) => {\n                let gmReplyWithName = null;\n\n                if (result.GmReplyWithName !== undefined) {\n                    if (true === result.GmReplyWithName) {\n                        const name = modalBox.querySelector(\"[data-testid='User-Names']\").querySelector('span').querySelector('span');\n                        gmReplyWithName = name.innerText;\n                        const regex = /^[^. ]+/gi;\n                        const matches = gmReplyWithName.match(regex);\n                        if (matches[0]) {\n                            gmReplyWithName = matches[0];\n                        }\n                    }\n                }\n\n                let content = getReplyContentFromType(clickedElement.getAttribute(dataGmType), gmReplyWithName);\n\n                if (modalBox) {\n                    const editableContent = modalBox.querySelector(\"[contenteditable='true']\");\n                    editableContent.setAttribute(dataGmType, clickedElement.getAttribute(dataGmType));\n\n                    if (editableContent) {\n                        editableContent.dispatchEvent(new InputEvent('textInput', {data: `${content}`, bubbles: true}));\n                    }\n                }\n            });\n        }, 500);\n    })\n}\n\nexport {replyButtons, gmClassName, gnClassName, dataGmType};\n","/*global chrome*/\n\nimport {gnClassName} from \"../tweet/replyButtons\";\n\nconst newContent = [\n    '',\n    'fam',\n    'gang',\n    'everyone',\n    'y\\'all',\n    'frens',\n    'degens',\n    'Web3',\n    'Legends',\n    'World',\n    'Twitter',\n    'Kings & Queens',\n    'people',\n    'folks',\n    'to the gm gang',\n    'to the GMers',\n    'to absolutely everyone',\n    'Web3 Legends',\n    'Web3 OGs'\n];\n\nconst newGmContent = [\n    'and happy day',\n];\n\nconst newGnContent = [\n    'and good dreams',\n];\n\nconst replyContent = [\n    '',\n    'fam',\n    'fren',\n    'degen',\n    'gang',\n    'bro',\n    'brother',\n    'to you',\n    'king',\n    'Legend',\n    'homie',\n    'my friend',\n    'dude',\n    'mate',\n    'buddy',\n    'OG',\n];\n\nconst replyGmContent = [\n    'and happy day',\n];\n\nconst replyGnContent = [\n    'and good dreams',\n];\n\nconst gmIcons = [\n    '☀',\n    '🌞',\n    '☕',\n    '🌈',\n    '🎉',\n    '🥳',\n    '💥',\n    '🔥',\n    '🚀',\n    '😎',\n];\n\nconst gnIcons = [\n    '🌕',\n    '🌛',\n    '🌑',\n    '🌙',\n    '⭐',\n    '✨',\n    '😴',\n    '🛏',\n    '✨',\n    \"💤\",\n];\n\nconst icons = [\n    '',\n    '👋',\n    '❤',\n    '🫡',\n    '📈',\n    '🧡',\n    '💚',\n    '🤍',\n    '💙',\n    '💜',\n    '😃',\n    '🫶',\n    '🤝',\n    '🫂',\n    '👊',\n    '💎',\n    '🤩',\n];\n\nconst getIcons = (mergeWith) => {\n    return icons.concat(mergeWith);\n}\n\nconst getReplyContentFromType = (type, withName = null) => {\n    return type === gnClassName ? replyGn(withName) : replyGm(withName);\n}\n\nconst getGm = () => {\n    const data = [0, 1];\n    return 1 === data[Math.floor(Math.random() * data.length)] ? 'gm' : 'GM';\n}\n\nconst getGn = () => {\n    const data = [0, 1];\n    return 1 === data[Math.floor(Math.random() * data.length)] ? 'gn' : 'GN';\n}\n\nconst getRandomItem = (data) => {\n    return data[Math.floor(Math.random() * data.length)];\n}\n\nconst newGm = () => {\n    return getContent(getGm(), getRandomItem(newContent.concat(newGmContent)), getRandomItem(getIcons(gmIcons)));\n}\n\nconst newGn = () => {\n    return getContent(getGn(), getRandomItem(newContent.concat(newGnContent)), getRandomItem(getIcons(gnIcons)));\n}\n\nconst replyGm = (withName = null) => {\n    const second = null !== withName ? withName : getRandomItem(replyContent.concat(replyGmContent))\n    return getContent(getGm(), second, getRandomItem(icons));\n}\n\nconst replyGn = (withName = null) => {\n    const second = null !== withName ? withName : getRandomItem(replyContent.concat(replyGnContent))\n    return getContent(getGn(), second, getRandomItem(icons));\n}\n\nconst getContent = (gm, content, icon) => {\n    let second = '' === content ? content : ` ${content}`;\n    const third  = '' === icon ? icon : ` ${icon}`;\n\n    return `${gm}${second}${third}`;\n}\n\nexport {newGm, newGn, replyGm, replyGn, getReplyContentFromType}\n","const getLastChild = (element) => {\n    const child = element.firstChild;\n\n    if (1 === child.nodeType) {\n        return getLastChild(child)\n    }\n\n    return element;\n}\n\nexport {getLastChild}\n","import {newGm, newGn} from \"../utils/getGmText\";\nimport {getLastChild} from \"../utils/getLastChild\";\n\nconst gmElementId = 'new_gm';\nconst gnElementId = 'new_gn';\n\nconst addButton = (label, content, id) => {\n    let button = document.getElementById(id);\n    if (!button) {\n        const newTweetElement = document.querySelector(\"header[role='banner']\")?.querySelector(\"a[href='/compose/tweet']\")?.parentElement;\n\n        if (newTweetElement) {\n            button = newTweetElement.cloneNode(true);\n            button.id = id;\n\n            const linkElement = button.querySelector(\"a[href='/compose/tweet']\");\n            linkElement.href = `/compose/tweet?text=${content}`;\n            linkElement.setAttribute('aria-label', id);\n            linkElement.setAttribute('data-testid', id);\n\n            const buttonLabel = getLastChild(button);\n            buttonLabel.innerText = label;\n\n            newTweetElement.parentNode.appendChild(button);\n        }\n    }\n}\n\nconst gmButton = () => {\n    addButton('GM 🌞', newGm(), gmElementId);\n}\n\nconst gnButton = () => {\n    addButton('GN 🌛', newGn(), gnElementId);\n}\n\nexport {gmButton, gnButton};\n","const addButtonIntoReply = (id, label) => {\n    const modalBox = document.querySelector(\"[aria-labelledby='modal-header']\");\n\n    if (modalBox) {\n        const button = modalBox.querySelector(`#${id}`);\n\n        if (!button) {\n            const geolocButton = modalBox.querySelector(\"[data-testid='geoButton']\");\n            if (geolocButton) {\n                const buttonContent = document.createElement('div');\n                buttonContent.id = id;\n                buttonContent.innerText = label;\n                buttonContent.style.width           = '150%';\n                buttonContent.style.textAlign       = 'center';\n                buttonContent.style.backgroundColor = 'rgb(233, 110, 195)';\n                buttonContent.style.color           = 'rgb(255,255,255)';\n                buttonContent.style.borderRadius    = '15px';\n                buttonContent.style.padding         = '5px 7px 5px 7px';\n                buttonContent.style.marginRight     = '5px';\n                buttonContent.style.cursor          = 'pointer';\n                buttonContent.style.fontSize        = '.9em';\n\n                buttonContent.setAttribute('role', 'button');\n\n                geolocButton.parentNode.appendChild(buttonContent);\n\n                return buttonContent;\n            }\n        }\n    }\n\n    return null;\n}\n\nexport {addButtonIntoReply}\n","import {addButtonIntoReply} from \"../utils/reply\";\nimport {getReplyContentFromType} from \"../utils/getGmText\";\nimport {dataGmType} from \"./replyButtons\";\n\nconst getModalBox = () => {\n    return document.querySelector(\"[aria-labelledby='modal-header']\");\n}\n\nconst addReloadContent = () => {\n    const reloadButton = addButtonIntoReply('reload-content', 'Reload');\n\n    if (reloadButton) {\n        const modalBox = getModalBox();\n\n        reloadButton.addEventListener('click', (event) => {\n            const editableContent = modalBox.querySelector(\"[data-testid='tweetTextarea_0']\");\n            editableContent.focus();\n\n            window.setTimeout(() => {\n                let sel, range;\n\n                if (window.getSelection && document.createRange) {\n                    range = document.createRange();\n                    range.selectNodeContents(editableContent);\n                    sel = window.getSelection();\n                    sel.removeAllRanges();\n                    sel.addRange(range);\n                } else if (document.body.createTextRange) {\n                    range = document.body.createTextRange();\n                    range.moveToElementText(editableContent);\n                    range.select();\n                }\n            }, 1);\n\n            window.setTimeout(() => {\n                const dataTransfer = new DataTransfer();\n                dataTransfer.setData('text/plain', getReplyContentFromType(editableContent.getAttribute(dataGmType)));\n\n                const event = new ClipboardEvent('paste', {\n                    clipboardData: dataTransfer,\n                    bubbles: true\n                });\n                editableContent.dispatchEvent(event);\n            }, 50);\n        });\n    }\n}\n\nconst addMemeButton = () => {\n    const memeButton = addButtonIntoReply('gmeme', 'GMeme');\n\n    if (memeButton) {\n        const modalBox = getModalBox();\n\n        memeButton.addEventListener('click', () => {\n            const media = modalBox.querySelector(\"[aria-label='Media']\");\n            if (media) {\n                const closeMediaButton = media.querySelector(\"[role='button']\");\n                if (closeMediaButton) {\n                    closeMediaButton.click();\n                }\n            }\n\n            const numbers = Array.from({length: 36}, (_, i) => i + 1);\n            const randNumber = numbers[Math.floor(Math.random() * numbers.length)];\n\n            const url = ``;\n            const editableContent = modalBox.querySelector(\"[data-testid='tweetTextarea_0']\");\n\n            fetch(url)\n                .then((response) => response.blob())\n                .then((blob) => {\n                    const dataTransfer = new DataTransfer();\n                    dataTransfer.items.add(new File([blob], 'image.png', {type: 'image/png'}));\n\n                    const event = new ClipboardEvent('paste', {\n                        clipboardData: dataTransfer,\n                        bubbles: true\n                    });\n                    editableContent.dispatchEvent(event);\n                })\n        })\n    }\n}\n\nexport {addReloadContent, addMemeButton}\n","/*global chrome*/\n\nimport {gmButton, gnButton} from \"./tweet/gmButton\";\nimport {replyButtons} from \"./tweet/replyButtons\";\nimport {addMemeButton, addReloadContent} from \"./tweet/editableContent\";\n\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.status && 'complete' === message.status) {\n        setTimeout(() => {\n            gmButton();\n            gnButton();\n        }, 500);\n    }\n});\n\nconst callback = (mutationsList, observer) => {\n    replyButtons();\n    addMemeButton();\n    addReloadContent();\n};\n\nconst targetNode = document.body;\nconst config = { attributes: false, childList: true, subtree: true };\nconst observer = new MutationObserver(callback);\nobserver.observe(targetNode, config);\n"],"names":["gnClassName","dataGmType","createButton","label","className","actionsBlock","regularReplyButton","replyElement","querySelector","newElement","cloneNode","classList","add","setAttribute","spanElement","textElement","parentNode","removeChild","buttonContent","document","createElement","innerText","style","width","textAlign","backgroundColor","color","borderRadius","padding","replaceWith","simulateClickOnReplyButton","appendChild","clickedElement","simulateElement","addEventListener","e","click","setTimeout","modalBox","chrome","storage","local","get","then","result","gmReplyWithName","undefined","GmReplyWithName","matches","match","content","getReplyContentFromType","getAttribute","editableContent","dispatchEvent","InputEvent","data","bubbles","newContent","newGmContent","newGnContent","replyContent","replyGmContent","replyGnContent","gmIcons","gnIcons","icons","getIcons","mergeWith","concat","type","withName","replyGn","replyGm","getGm","Math","floor","random","length","getGn","getRandomItem","second","getContent","gm","icon","third","getLastChild","element","child","firstChild","nodeType","addButton","id","button","getElementById","newTweetElement","parentElement","linkElement","href","gmButton","gnButton","addButtonIntoReply","geolocButton","marginRight","cursor","fontSize","getModalBox","runtime","onMessage","addListener","message","sender","sendResponse","status","targetNode","body","MutationObserver","mutationsList","observer","replies","querySelectorAll","forEach","closest","replyButtons","memeButton","media","closeMediaButton","numbers","Array","from","_","i","randNumber","url","fetch","response","blob","dataTransfer","DataTransfer","items","File","event","ClipboardEvent","clipboardData","addMemeButton","reloadButton","focus","window","sel","range","getSelection","createRange","selectNodeContents","removeAllRanges","addRange","createTextRange","moveToElementText","select","setData","addReloadContent","observe","attributes","childList","subtree"],"sourceRoot":""}